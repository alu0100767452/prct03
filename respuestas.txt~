Respuestas a las preguntas:

18/
El resultado Obtenido es:
Hello world
 => nil 
2.0.0p247 :002 >

21/
La diferencia principal al usar el intérprete interactivo y el intérprete ruby es que con el intérprete de ruby solo nos da como salida la cadena de caracteres que introducimos en el código, sin embargo con el irb además de aparecer la cadena "Hello world" tambien apunta a una clase nula (nil) y nos deja el control para seguir introduciendo sentencias.

26/
El resultado arrojado por pry es el siguiente:

[1] pry(main)> puts x
10
=> nil
[2] pry(main)> def hello
[2] pry(main)*   puts "Hello world"
[2] pry(main)* end  
=> nil
[3] pry(main)> hello
Hello world
=> nil
[4] pry(main)> byebye
bye bye world!!!
=> nil
[5] pry(main)> x = "changed"
=> "changed"
[6] pry(main)> exit
program resumes here. Values of x is: changed.

27/
Las diferencias que se pueden observar entre el intérprete interactivo y el pry es que el irb va ejecutando el programa en la consola de forma interactiva. Mientras que con pry, cuando en la ejecución del programa lee la línea binding.pry (siempre y cuando tenga el "require 'pry'") da el control a la consola permitiendodepurar en tiempo de ejecucion el programa, añadiendo nuevos métodos, haciendo asignaciones, etc. Si la línea binding no se llegara a ejecutar, el programa se ejecutaría de forma normal.

34/
La diferencia entre "\t\n" y '\t\n' radica en que el "\t\n" arrojará por pantalla un tabulador y un retorno de carro si embargo el '\t\n' escribirá por pantalla la cadena: \t\n

[1] pry(main)> puts '\t\n'
\t\n
=> nil
[2] pry(main)> puts "\t\n"
	
=> nil
[3] pry(main)> 



